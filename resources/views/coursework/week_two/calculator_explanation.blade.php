<p>I had originally followed a simple guide to build a calculator using JQuery events for each button, but in doing that I was finding it hard to debug things like reusing an operation (such as going <code>5 + 5 = 10 = 15</code> etc) and chaining operations (<code>5 + 2 - 4 =</code> should show <code>3</code>, but it wouldn't), so I decided to approach it in a different way.</p>
<p>I decided to create an object for the calculator, that takes a string input and then updates an output element. These calls were made within from JQuery, using click to get a <code>data-value</code> attribute from each element that stored it's function, inputing it into the object.</p> 
<p>The calculator object has a lifecycle of checking the input, if the input is relevant, calling a function to do something, then refreshing the output. It stores operations as a sub object with the operator (<code>+ - * /</code>) and a value. This allows the equals button to be pressed multiple times.</p>
<p>If there is already an operation when an operator is pressed, it resets the current operation and puts the current value into it's background store variable, then clears the output allowing for the operation value to be input.</p>
<p>I also added the ability to convert between <code>$</code> and <code>Â£</code> with the calculator, to do this I used a library called <a href="http://openexchangerates.github.io/money.js/">money.js</a> and the <a href="http://fixer.io/">fixer.io</a> API (called by AJAX with JQuery's getJson function) and passed into the library to get up to date and accurate currency conversions.</p>
<p>Overall I'm happy with this approach, by abstracting the functionality of the calculator into an object, it allows it to be updated and expanded on easily in one central codebase, that could be reused elsewhere.</p>